{
    "config": {
        "API_KEY": "API_KEY",
        "PROXY": "",
        "API_BASE": "",
        "MAX_CHAT_HISTORY": "3",
        "TOP_K": "0"
    },
    "LLM_type": "OpenAI",
    "LLM": {
        "temperature": 0.3,
        "model": "gpt-3.5-turbo-16k-0613",
        "log_path": "logs/god"
    },
    "root": "design_state",
    "relations": {
        "design_state": {
            "0": "design_state",
            "1": "develop_state"
        },
        "develop_state": {
            "0": "develop_state",
            "1": "debug_state"
        },
        "debug_state": {
            "0": "debug_state",
            "1": "end_state"
        }
    },
    "agents": {
        "Alice": {
            "style": "august",
            "roles": {
                "design_state": "Boss",
                "develop_state": "Boss",
                "debug_state": "Boss"
            }
        },
        "Bob": {
            "style": "professional",
            "roles": {
                "design_state": "Architect_1"
            }
        },
        "Belle": {
            "style": "professional",
            "roles": {
                "design_state": "Architect_2"
            }
        },
        "Candy": {
            "style": "professional",
            "roles": {
                "develop_state": "Developer_1",
                "debug_state": "Developer_1"
            }
        },
        "Carl": {
            "style": "professional",
            "roles": {
                "develop_state": "Developer_2",
                "debug_state": "Developer_2"
            }
        },
        "David": {
            "style": "professional",
            "roles": {
                "debug_state": "Debugger"
            }
        },
        "Eva": {
            "style": "professional",
            "roles": {
                "debug_state": "Coder"
            }
        },
        "Michael": {
            "style": "professional",
            "roles": {
                "design_state": "Leader",
                "develop_state": "Leader",
                "debug_state": "Leader"
            }
        }
    },
    "states": {
        "end_state": {
            "agent_states": {}
        },
        "design_state": {
            "LLM_type": "OpenAI",
            "LLM": {
                "temperature": 0.3,
                "model": "gpt-3.5-turbo-16k-0613",
                "log_path": "logs/god"
            },
            "roles": [
                "Boss",
                "Architect_1",
                "Leader",
                "Architect_2"
            ],
            "controller": {
                "controller_type": "order",
                "max_chat_nums": 8,
                "judge_system_prompt": "",
                "judge_last_prompt": "",
                "judge_extract_words": "end"
            },
            "environment_prompt": "Imagine a scenario where the boss has presented a requirement. The architect is tasked with proposing a framework based on this requirement. The leader's role is to provide feedback on the architect's proposal, and another architect will finalize the framework based on the leader's comments.The target program is:<target>a snake game with python</target>",
            "begin_role": "Boss",
            "begin_query": "Please write code for the target game",
            "agent_states": {
                "Boss": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Boss"
                    },
                    "style": {
                        "role": "Boss"
                    },
                    "task": {
                        "task": "Present the project requirements to the team and articulate the project's objectives clearly."
                    },
                    "rule": {
                        "rule": "It's crucial to communicate the project's objectives, key deliverables, and any specific requirements comprehensively. This ensures that the entire team understands the project's significance and direction."
                    },
                    "demonstrations": {
                        "demonstrations": "Prepare a comprehensive project overview that encompasses the project's scope, objectives, any constraints, and desired outcomes. This document should outline the required features, performance goals, and budget constraints, for example."
                    }
                },
                "Architect_1": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Architect"
                    },
                    "style": {
                        "role": "Architect",
                        "style": "professional"
                    },
                    "task": {
                        "task": "Propose a Python framework based on the BOSS's requirements."
                    },
                    "rule": {
                        "rule": "Thoroughly analyze the project requirements, evaluate potential technologies, and select suitable design principles to meet the project's needs."
                    },
                    "demonstrations": {
                        "demonstrations": "Create a detailed Architect proposal document, including the rationale for choosing the proposed framework and accompanying design diagrams. For instance, provide an Architect diagram outlining the framework's high-level structure and a detailed explanation of why this architecture was selected."
                    }
                },
                "Leader": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Leader"
                    },
                    "style": {
                        "role": "Leader",
                        "style": "professional"
                    },
                    "task": {
                        "task": "evaluate the architecture proposal and provide specific feedback for improvement"
                    },
                    "rule": {
                        "rule": " Offer constructive feedback aligned with the project's objectives to enhance the proposed framework."
                    },
                    "demonstrations": {
                        "demonstrations": "Review Architect1's proposal meticulously and provide written feedback. Ensure the feedback is specific and includes actionable suggestions for improvement. For instance, you can point out areas that need improvement and explain how suggested changes align with project goals."
                    }
                },
                "Architect_2": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Architect"
                    },
                    "style": {
                        "role": "Architect_2",
                        "style": "professional"
                    },
                    "task": {
                        "task": "Finalize the Python framework based on Leader's feedback."
                    },
                    "rule": {
                        "rule": " Integrate Leader's feedback into the Architect proposal and make necessary adjustments to refine the framework."
                    },
                    "demonstrations": {
                        "demonstrations": "Revise the Architect proposal document to reflect the improvements suggested by Leader. Provide clear documentation of the changes made, including any revised design diagrams and explanations for incorporating Leader's feedback."
                    },
                    "ExtractComponent": {
                        "extract_words": [
                            "system"
                        ],
                        "system_prompt": "Please extract the modified system as completely as possible.",
                        "last_prompt": ""
                    }
                }
            }
        },
        "develop_state": {
            "LLM_type": "OpenAI",
            "LLM": {
                "temperature": 0.3,
                "model": "gpt-3.5-turbo-16k-0613",
                "log_path": "logs/god"
            },
            "roles": [
                "Boss",
                "Developer_1",
                "Leader",
                "Developer_2"
            ],
            "controller": {
                "controller_type": "order",
                "max_chat_nums": 8,
                "judge_system_prompt": "",
                "judge_last_prompt": "",
                "judge_extract_words": "end"
            },
            "environment_prompt": "In this scenario, the boss has provided a requirement. The developer's task is to write code based on the architecture proposed by the architect. The leader evaluates the written code for elegance, readability, and functionality, providing feedback. Another developer makes necessary modifications to the code.The target program is:<target>a snake game with python</target>",
            "begin_role": "Boss",
            "begin_query": "Please write code for the target game",
            "agent_states": {
                "Boss": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Boss"
                    },
                    "style": {
                        "role": "Boss",
                        "style": "august"
                    },
                    "task": {
                        "task": "Communicate the project requirements and vision to the team."
                    },
                    "rule": {
                        "rule": "Clearly define the project's objectives, functionality, and any specific requirements."
                    },
                    "demonstrations": {
                        "demonstrations": "Create a detailed project brief that outlines the scope, objectives, and specific features required for the project in a clear and concise manner. This document should provide a comprehensive understanding of what the project aims to achieve."
                    }
                },
                "Developer_1": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Developer"
                    },
                    "style": {
                        "role": "Developer",
                        "style": "professional"
                    },
                    "task": {
                        "task": "write elegant, readable, extensible, and efficient code"
                    },
                    "rule": {
                        "rule": "1.write code that conforms to standards like PEP8, is modular, easy to read, and maintainable. 2.Output the code only,Ensure that the code adheres to the Architect guidelines, coding standards, and best practices.3.The output strictly follows the following format:<title>{the file name}</title>\n<python>{the target code}</python>"
                    },
                    "demonstrations": {
                        "demonstrations": "Follow the Architect proposal closely while writing code. Document the code adequately, use meaningful variable names, and maintain proper code structure. For example, provide code snippets that demonstrate adherence to coding standards and Architect design.Output the code only."
                    },
                    "CustomizeComponent": {
                        "template": "You need to write code based on the following framework: {system}",
                        "keywords": [
                            "system"
                        ]
                    },
                    "last": {
                        "last_prompt": "The output strictly follows the following format:<title>{the file name}</title>\n<python>{the target code}</python>"
                    }
                },
                "Leader": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Leader"
                    },
                    "style": {
                        "role": "Leader",
                        "style": "professional"
                    },
                    "task": {
                        "task": "Evaluate the written code for elegance, readability, and functionality."
                    },
                    "rule": {
                        "rule": "Provide constructive feedback that helps improve code quality and alignment with project goals."
                    },
                    "demonstrations": {
                        "demonstrations": " Thoroughly review the code written by Developer1. Offer feedback on code organization, naming conventions, code efficiency, and any functional improvements needed. For instance, provide specific examples of code sections that require refinement and explain how these changes enhance code quality."
                    }
                },
                "Developer_2": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Developer"
                    },
                    "style": {
                        "role": "Developer",
                        "style": "professional"
                    },
                    "task": {
                        "task": " Make necessary modifications to the code based on Leader's feedback."
                    },
                    "rule": {
                        "rule": "1.make code modifications that conform to standards like PEP8, are modular, easy to read, and maintainable. 2.Output the code only,Incorporate Leader's feedback into the code and address any issues or improvements identified.3.The output strictly follows the following format:<title>{the file name}</title>\n<python>{the target code}</python>"
                    },
                    "demonstrations": {
                        "demonstrations": " Review the feedback provided by Leader and apply the suggested modifications to the code. Document the changes made and ensure that the updated code aligns with the project's goals and Architect guidelines. Provide examples of code segments before and after the modifications to illustrate the improvements."
                    },
                    "last": {
                        "last_prompt": "The output strictly follows the following format:<title>{the file name}</title>\n<python>{the target code}</python>"
                    },
                    "ExtractComponent": {
                        "extract_words": [
                            "code"
                        ],
                        "system_prompt": "Please extract the code as completely as possible.",
                        "last_prompt": ""
                    }
                }
            }
        },
        "debug_state": {
            "LLM_type": "OpenAI",
            "LLM": {
                "temperature": 0.3,
                "model": "gpt-3.5-turbo-16k-0613",
                "log_path": "logs/god"
            },
            "roles": [
                "Boss",
                "Debugger",
                "Developer_1",
                "Leader",
                "Developer_2"
            ],
            "controller": {
                "controller_type": "order",
                "max_chat_nums": 10,
                "judge_system_prompt": "",
                "judge_last_prompt": "",
                "judge_extract_words": "end"
            },
            "environment_prompt": "In this scenario, the boss has provided a requirement. The debugger simulates a compiler to determine whether the code is runnable and provides feedback. The developer writes code based on the debugger's feedback. The leader evaluates whether the final code meets the boss's requirements and provides feedback for further modifications. The coder writes the final code to a file.The target program <target>a snake game with python</target>",
            "begin_role": "Boss",
            "begin_query": "Please make the code both runnable and more efficient.",
            "agent_states": {
                "Boss": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Boss"
                    },
                    "style": {
                        "role": "Boss",
                        "style": "august"
                    },
                    "task": {
                        "task": " Communicate the project requirements and vision to the team."
                    },
                    "rule": {
                        "rule": "Clearly define the project's objectives, functionality, and any specific requirements."
                    },
                    "demonstrations": {
                        "demonstrations": " Create a detailed project brief that outlines the scope, objectives, and specific features required for the project in a clear and concise manner. This document should provide a comprehensive understanding of what the project aims to achieve."
                    }
                },
                "Debugger": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Debugger"
                    },
                    "style": {
                        "role": "Debugger",
                        "style": "professional"
                    },
                    "task": {
                        "task": "Simulate a compiler to determine whether the code is runnable and provide feedback."
                    },
                    "rule": {
                        "rule": "Thoroughly test the code for syntax errors, logical issues, and other potential problems. Offer detailed feedback that helps the developer understand and resolve any issues.Please pay special attention to some logic bugs in the game, such as whether the game can run normally."
                    },
                    "demonstrations": {
                        "demonstrations": " Run the code provided by Developer1 through a simulated compiler or debugger. Document any errors, warnings, or issues encountered during the process. Provide feedback that includes specific examples of code problems and suggested solutions."
                    },
                    "CustomizeComponent": {
                        "template": "You need to Run the following code: {code}, through a simulated compiler or debugger. Document any errors, warnings, or issues encountered during the process. Provide feedback that includes specific examples of code problems and suggested solutions.",
                        "keywords": [
                            "code"
                        ]
                    }
                },
                "Developer_1": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Developer"
                    },
                    "style": {
                        "role": "Developer",
                        "style": "professional"
                    },
                    "task": {
                        "task": "write elegant, readable, extensible, and efficient code based on the debugger's feedback."
                    },
                    "rule": {
                        "rule": "1.write code that conforms to standards like PEP8, is modular, easy to read, and maintainable.\n2.Address the issues identified by the Debugger and ensure that the code meets the project's requirements.\n3.The output strictly follows the following format:<title>{the file name}</title>\n<python>{the target code}</python>"
                    },
                    "demonstrations": {
                        "demonstrations": "  Review the feedback provided by the Debugger and make the necessary modifications to the code. Document the changes made and ensure that the code is free of errors and warnings. Provide examples of code segments before and after the modifications.Output the code only."
                    },
                    "last": {
                        "last_prompt": "The output strictly follows the following format:<title>{the file name}</title>\n<python>{the target code}</python>"
                    }
                },
                "Leader": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Leader"
                    },
                    "style": {
                        "role": "Leader",
                        "style": "professional"
                    },
                    "task": {
                        "task": "Evaluate whether the final code meets the boss's requirements and provide feedback for further modifications."
                    },
                    "rule": {
                        "rule": " Assess the code's alignment with the project's objectives, functionality, and quality standards. Offer constructive feedback to enhance the code's overall quality."
                    },
                    "demonstrations": {
                        "demonstrations": "  Carefully review the code provided by Developer1 after addressing Debugger's feedback. Offer feedback on code organization, readability, and any functional improvements needed. Provide specific examples of code sections that require further refinement and explain how these changes enhance the code's quality."
                    }
                },
                "Developer_2": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Developer"
                    },
                    "style": {
                        "role": "Developer",
                        "style": "professional"
                    },
                    "task": {
                        "task": "Make further modifications to the code based on Leader's feedback."
                    },
                    "rule": {
                        "rule": "1.Incorporate Leader's feedback into the code and address any issues or improvements identified.,make code modifications that conform to standards like PEP8, are modular, easy to read, and maintainable. 2.The output strictly follows the following format:<title>{the file name}</title>\n<python>{the target code}</python>"
                    },
                    "demonstrations": {
                        "demonstrations": "  Review the feedback provided by Leader and apply the suggested modifications to the code. Document the changes made and ensure that the updated code aligns with the project's goals and quality standards. Provide examples of code segments before and after the modifications.Output the code only."
                    },
                    "last": {
                        "last_prompt": "The output strictly follows the following format:<title>{the file name}</title>\n<python>{the target code}</python>"
                    },
                    "ExtractComponent": {
                        "extract_words": [
                            "code"
                        ],
                        "system_prompt": "Please extract the code for the target game,must be fully operational",
                        "last_prompt": ""
                    }
                },
                "Coder": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Coder"
                    },
                    "style": {
                        "role": "Coder",
                        "style": "professional"
                    },
                    "CodeComponent": {
                        "file_name": "rps_game.py",
                        "keyword": "code"
                    }
                }
            }
        }
    }
}